use crate::types::player::Player;

#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]
pub enum FoodType {
    Anchovies,
    Sardine,
    Trout,
    Cod,
    UgthankiKebab,
    Kebab,
    Stew,
    Shrimps,
    Chicken,
    Meat,
    Bread,
    Herring,
    Mackerel,
    Pike,
    Peach,
    Salmon,
    Tuna,
    JugOfWine,
    Cake,
    MeatPie,
    Lobster,
    Bass,
    PlainPizza,
    Swordfish,
    ApplePie,
    ChocolateCake,
    SnowyKnight,
    PotatoWithCheese,
    Monkfish,
    Kyatt,
    AnchovyPizza,
    Karambwan,
    Curry,
    PyreFox,
    GuthixRest,
    Shark,
    SeaTurtle,
    SunlightAntelope,
    PineapplePizza,
    DragonfruitPie,
    SummerPie,
    WildPie,
    MantaRay,
    TunaPotato,
    DarkCrab,
    Anglerfish,
    DashingKebbit,
    MoonlightAntelope,
    BasketOfStrawberries,
    SaradominBrew,
    Paddlefish,
    CorruptedPaddlefish,
    WildKebbit,
    Larupia,
    BarbTailedKebbit,
    Graahk,
    PurpleSweets,
    RedberryPie,
    GardenPie,
    FishPie,
    BotanicalPie,
    MushroomPie,
    AdmiralPie,
    ToadCrunchies,
    SpicyCrunchies,
    WormCrunchies,
    ChocchipCrunchies,
    MeatPizza,
    FruitBatta,
    ToadBatta,
    WormBatta,
    VegetableBatta,
    CheeseTomBatta,
    WormHole,
    VegBall,
    ChocolateBomb,
    TangledToadsLegs,
    MushroomPotato,
    XericsAidMinus,
    XericsAid,
    XericsAidPlus,
    Nectar,
    Ambrosia,
    SilkDressing,
    MossLizard,
    Bream,
}

pub struct Food {
    pub name: FoodType,
    pub heal_amount: u32,
    pub eat_delay: u32,
    pub attack_delay: u32,
}

impl Food {
    pub fn new(name: FoodType, heal_amount: u32, eat_delay: u32, attack_delay: u32) -> Self {
        Self {
            name,
            heal_amount,
            eat_delay,
            attack_delay,
        }
    }

    pub fn from_type(food_type: FoodType, player: Player) -> Self {
        match food_type {
            FoodType::Anchovies => Food::new(FoodType::Anchovies, 1, 3, 3),
            FoodType::Sardine => Food::new(FoodType::Sardine, 4, 3, 3),
            FoodType::Trout => Food::new(FoodType::Trout, 7, 3, 3),
            FoodType::Cod => Food::new(FoodType::Cod, 7, 3, 3),
            FoodType::UgthankiKebab => Food::new(FoodType::UgthankiKebab, 19, 3, 3),
            FoodType::Kebab => Food::new(FoodType::Kebab, 3, 3, 3),
            FoodType::Stew => Food::new(FoodType::Stew, 11, 3, 3),
            FoodType::Shrimps => Food::new(FoodType::Shrimps, 3, 3, 3),
            FoodType::Chicken => Food::new(FoodType::Chicken, 3, 3, 3),
            FoodType::Meat => Food::new(FoodType::Meat, 3, 3, 3),
            FoodType::Bread => Food::new(FoodType::Bread, 5, 3, 3),
            FoodType::Herring => Food::new(FoodType::Herring, 5, 3, 3),
            FoodType::Mackerel => Food::new(FoodType::Mackerel, 6, 3, 3),
            FoodType::Pike => Food::new(FoodType::Pike, 8, 3, 3),
            FoodType::Peach => Food::new(FoodType::Peach, 8, 3, 3),
            FoodType::Salmon => Food::new(FoodType::Salmon, 9, 3, 3),
            FoodType::Tuna => Food::new(FoodType::Tuna, 10, 3, 3),
            FoodType::JugOfWine => Food::new(FoodType::JugOfWine, 11, 3, 3),
            FoodType::Cake => Food::new(FoodType::Cake, 12, 2, 3),
            FoodType::MeatPie => Food::new(FoodType::MeatPie, 12, 1, 3),
            FoodType::Lobster => Food::new(FoodType::Lobster, 12, 3, 3),
            FoodType::Bass => Food::new(FoodType::Bass, 13, 3, 3),
            FoodType::PlainPizza => Food::new(FoodType::PlainPizza, 14, 1, 3),
            FoodType::Swordfish => Food::new(FoodType::Swordfish, 14, 3, 3),
            FoodType::ApplePie => Food::new(FoodType::ApplePie, 14, 1, 3),
            FoodType::ChocolateCake => Food::new(FoodType::ChocolateCake, 15, 2, 3),
            FoodType::SnowyKnight => Food::new(FoodType::SnowyKnight, 15, 3, 3),
            FoodType::PotatoWithCheese => Food::new(FoodType::PotatoWithCheese, 16, 3, 3),
            FoodType::Monkfish => Food::new(FoodType::Monkfish, 16, 3, 3),
            FoodType::Kyatt => Food::new(FoodType::Kyatt, 17, 3, 3),
            FoodType::AnchovyPizza => Food::new(FoodType::AnchovyPizza, 18, 1, 3),
            FoodType::Karambwan => Food::new(FoodType::Karambwan, 18, 3, 2),
            FoodType::Curry => Food::new(FoodType::Curry, 19, 3, 3),
            FoodType::PyreFox => Food::new(FoodType::PyreFox, 19, 3, 3),
            FoodType::GuthixRest => Food::new(FoodType::GuthixRest, 20, 3, 3),
            FoodType::Shark => Food::new(FoodType::Shark, 20, 3, 3),
            FoodType::SeaTurtle => Food::new(FoodType::SeaTurtle, 21, 3, 3),
            FoodType::SunlightAntelope => Food::new(FoodType::SunlightAntelope, 21, 3, 3),
            FoodType::PineapplePizza => Food::new(FoodType::PineapplePizza, 22, 1, 3),
            FoodType::DragonfruitPie => Food::new(FoodType::DragonfruitPie, 20, 1, 3),
            FoodType::SummerPie => Food::new(FoodType::SummerPie, 22, 1, 3),
            FoodType::BasketOfStrawberries => Food::new(FoodType::BasketOfStrawberries, 30, 3, 3),
            FoodType::SaradominBrew => Food::new(
                FoodType::SaradominBrew,
                4 * (2 + player.stats.hitpoints.base * 3 / 20),
                3,
                3,
            ),
            FoodType::Paddlefish => Food::new(FoodType::Paddlefish, 20, 3, 3),
            FoodType::CorruptedPaddlefish => Food::new(FoodType::CorruptedPaddlefish, 16, 3, 2),
            FoodType::WildKebbit => Food::new(FoodType::WildKebbit, 8, 3, 3),
            FoodType::Larupia => Food::new(FoodType::Larupia, 11, 3, 3),
            FoodType::BarbTailedKebbit => Food::new(FoodType::BarbTailedKebbit, 12, 3, 3),
            FoodType::Graahk => Food::new(FoodType::Graahk, 14, 3, 3),
            FoodType::WildPie => Food::new(FoodType::WildPie, 22, 1, 3),
            FoodType::MantaRay => Food::new(FoodType::MantaRay, 22, 3, 3),
            FoodType::TunaPotato => Food::new(FoodType::TunaPotato, 22, 3, 3),
            FoodType::DarkCrab => Food::new(FoodType::DarkCrab, 22, 3, 3),
            FoodType::Anglerfish => {
                let hp = player.stats.hitpoints.base;
                let heal = hp / 10 + 2 * hp / 25 + 5 * hp / 93 + 2;
                Food::new(FoodType::Anglerfish, heal, 3, 3)
            }
            FoodType::DashingKebbit => Food::new(FoodType::DashingKebbit, 23, 3, 3),
            FoodType::MoonlightAntelope => Food::new(FoodType::MoonlightAntelope, 26, 3, 3),
            FoodType::PurpleSweets => Food::new(FoodType::PurpleSweets, 1, 3, 3),
            FoodType::RedberryPie => Food::new(FoodType::RedberryPie, 10, 1, 3),
            FoodType::GardenPie => Food::new(FoodType::GardenPie, 12, 1, 3),
            FoodType::FishPie => Food::new(FoodType::FishPie, 12, 1, 3),
            FoodType::BotanicalPie => Food::new(FoodType::BotanicalPie, 14, 1, 3),
            FoodType::MushroomPie => Food::new(FoodType::MushroomPie, 16, 1, 3),
            FoodType::AdmiralPie => Food::new(FoodType::AdmiralPie, 16, 1, 3),
            FoodType::ToadCrunchies => Food::new(FoodType::ToadCrunchies, 8, 3, 2),
            FoodType::SpicyCrunchies => Food::new(FoodType::SpicyCrunchies, 7, 3, 2),
            FoodType::WormCrunchies => Food::new(FoodType::WormCrunchies, 8, 3, 2),
            FoodType::ChocchipCrunchies => Food::new(FoodType::ChocchipCrunchies, 7, 3, 2),
            FoodType::MeatPizza => Food::new(FoodType::MeatPizza, 16, 1, 3),
            FoodType::FruitBatta => Food::new(FoodType::FruitBatta, 11, 3, 2),
            FoodType::ToadBatta => Food::new(FoodType::ToadBatta, 11, 3, 2),
            FoodType::WormBatta => Food::new(FoodType::WormBatta, 11, 3, 2),
            FoodType::VegetableBatta => Food::new(FoodType::VegetableBatta, 11, 3, 2),
            FoodType::CheeseTomBatta => Food::new(FoodType::CheeseTomBatta, 11, 3, 2),
            FoodType::WormHole => Food::new(FoodType::WormHole, 12, 3, 2),
            FoodType::VegBall => Food::new(FoodType::VegBall, 12, 3, 2),
            FoodType::ChocolateBomb => Food::new(FoodType::ChocolateBomb, 15, 3, 2),
            FoodType::TangledToadsLegs => Food::new(FoodType::TangledToadsLegs, 15, 3, 2),
            FoodType::MushroomPotato => Food::new(FoodType::MushroomPotato, 20, 3, 3),
            FoodType::XericsAidMinus => Food::new(
                FoodType::XericsAidMinus,
                4 * (1 + player.stats.hitpoints.base * 7 / 100),
                3,
                3,
            ),
            FoodType::XericsAid => Food::new(
                FoodType::XericsAid,
                4 * (2 + player.stats.hitpoints.base * 3 / 25),
                3,
                3,
            ),
            FoodType::XericsAidPlus => Food::new(
                FoodType::XericsAidPlus,
                4 * (5 + player.stats.hitpoints.base * 3 / 20),
                3,
                3,
            ),
            FoodType::Nectar => Food::new(
                FoodType::Nectar,
                4 * (3 + player.stats.hitpoints.base * 3 / 20),
                3,
                3,
            ),
            FoodType::SilkDressing => Food::new(FoodType::SilkDressing, 100, 3, 3),
            FoodType::Ambrosia => Food::new(FoodType::Ambrosia, 99, 3, 3),
            FoodType::MossLizard => Food::new(FoodType::MossLizard, 33, 3, 3), // TODO: Add player fishing and hunter levels for these foods
            FoodType::Bream => Food::new(FoodType::Bream, 33, 3, 3),
        }
    }
}
